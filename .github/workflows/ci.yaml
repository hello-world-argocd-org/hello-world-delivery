name: Helm Delivery Chart E2E

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

jobs:
  helm-e2e:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    env:
      KIND_VERSION: v0.29.0
      HELM_VERSION: v3.18.4
      KUBECONFORM_VERSION: v0.7.0

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Install Helm
      - name: Install Helm
        run: |
          curl -fsSL https://get.helm.sh/helm-${HELM_VERSION}-linux-amd64.tar.gz | tar xz
          sudo mv linux-amd64/helm /usr/local/bin/helm

      # Install Kind
      - name: Install Kind
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/${KIND_VERSION}/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind

      # Install kubeconform
      - name: Install kubeconform
        run: |
          curl -L https://github.com/yannh/kubeconform/releases/download/${KUBECONFORM_VERSION}/kubeconform-linux-amd64.tar.gz \
            | tar xz
          sudo mv kubeconform /usr/local/bin/kubeconform

      # Optional: install yamllint for better linting feedback
      - name: Install yamllint
        run: sudo apt-get update && sudo apt-get install -y yamllint

      # Cache Helm dependencies to speed up builds
      - name: Cache Helm dependencies
        uses: actions/cache@v4
        with:
          path: |
            charts/**/charts
            charts/**/Chart.lock
          key: helm-${{ hashFiles('**/Chart.yaml', '**/Chart.lock') }}

      - name: Login to GHCR
        run: echo "${{ github.token }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      # Run all Makefile tests
      - name: Run Makefile tests
        run: make all

      # Always show diagnostics if something fails
      - name: Dump detailed diagnostics on failure
        if: failure()
        run: |
          set -euo pipefail
          echo "::group::Cluster info"
          kubectl cluster-info || true
          kubectl version || true
          echo "::endgroup::"

          echo "::group::All resources summary"
          kubectl get all -A -o wide || true
          echo "::endgroup::"

          echo "::group::Events (sorted)"
          kubectl get events -A --sort-by=.lastTimestamp || true
          echo "::endgroup::"

          echo "::group::Ingresses"
          kubectl get ingress -A -o yaml || true
          echo "::endgroup::"

          echo "::group::Endpoints"
          kubectl get endpoints -A -o yaml || true
          echo "::endgroup::"

          echo "::group::Namespace-specific deep diagnostics"
          for ns in dev stage prod; do
            echo "---- Namespace: $ns ----"
            kubectl -n "$ns" get all -o wide || true
            kubectl -n "$ns" get events --sort-by=.lastTimestamp || true
            pods=$(kubectl -n "$ns" get pods -o name || true)
            for pod in $pods; do
              echo "==== Describing $pod ===="
              kubectl -n "$ns" describe "$pod" || true
              echo "==== Logs for $pod ===="
              kubectl -n "$ns" logs "$pod" --all-containers --timestamps || true
              echo "==== Previous logs for $pod (if restarted) ===="
              kubectl -n "$ns" logs "$pod" -p --all-containers --timestamps || true
            done
          done
          echo "::endgroup::"

